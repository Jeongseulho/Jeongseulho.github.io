{"version":3,"file":"component---src-pages-search-tsx-170464987e8d34665bc1.js","mappings":"+OAQA,MAAMA,GAAIC,EAAAA,EAAAA,GAAA,QAAAC,OAAA,aAAAD,CAAA,uMAWYE,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,MAAM,GAAG,uCAGvDC,EAAAA,GAAAA,GAAa,wCAsBjB,MAXeC,IAAsC,IAArC,KAAEC,EAAI,SAAEC,GAAuBF,EAC7C,OACEG,EAAAA,EAAAA,IAACC,EAAAA,EAAa,CAACR,MAAOA,EAAAA,KACpBO,EAAAA,EAAAA,IAACE,EAAAA,GAAM,CAACC,OAAQC,EAAAA,KAChBJ,EAAAA,EAAAA,IAACK,EAAAA,EAAM,CAACP,KAAMA,KACdE,EAAAA,EAAAA,IAACX,EAAI,KAAEU,IACPC,EAAAA,EAAAA,IAACM,EAAAA,EAAM,MACO,E,oBC9BpB,MAAMC,GAASjB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,mCAGXM,EAAAA,GAAAA,GAAa,sBAKXY,GAAclB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAmB,KAAA,SAAAN,OAAA,qBAIdO,GAAUpB,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAmB,KAAA,SAAAN,OAAA,6HAUVQ,GAAOrB,EAAAA,EAAAA,GAAA,MAAAC,OAAA,YAAAD,CAAA,0IAQSE,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,MAAM,IAAI,oDAIpCE,IAAA,IAAC,MAAEJ,GAAOI,EAAA,OAAKJ,EAAMC,OAAOkB,QAAQC,OAAO,yBAC3CC,IAAA,IAAC,MAAErB,GAAOqB,EAAA,OAAKrB,EAAMC,OAAOkB,QAAQC,OAAO,oCAqEnE,MAtDmBE,IAII,IAHrBC,MACEC,mBAAmB,MAAEC,KAEPH,EAChB,MAAMI,EAAUC,EAAAA,SACd,IACEF,EAAMG,QACJ,CACEC,EAAgCC,KAM7B,IAJDC,MACEC,aAAa,KAAEC,KAERH,EASX,OAPAG,EAAKC,SAAQC,SACOC,IAAdP,EAAKM,GAAoBN,EAAKM,GAAO,EACpCN,EAAKM,IAAM,IAGlBN,EAAU,MAEHA,CAAI,GAEb,CAAEQ,IAAK,KAEX,IAEF,OACE9B,EAAAA,EAAAA,IAAC+B,EAAY,CAACjC,KAAMkC,EAAAA,EAAAA,SAClBhC,EAAAA,EAAAA,IAACO,EAAS,MACRP,EAAAA,EAAAA,IAACiC,EAAAA,GAAS,KAAC,SACXjC,EAAAA,EAAAA,IAACQ,EAAc,MAIbR,EAAAA,EAAAA,IAACU,EAAU,KACRwB,OAAOC,QAAQhB,GAASiB,KAAIC,IAAA,IAAEC,EAAKC,GAAMF,EAAA,OACxCrC,EAAAA,EAAAA,IAACwC,EAAAA,KAAI,CAACC,GAAE,SAAWH,EAAOA,IAAKA,IAC7BtC,EAAAA,EAAAA,IAACW,EAAO,MACNX,EAAAA,EAAAA,IAACX,EAAAA,GAAI,CAACqD,QAAM,EAACC,UAAWlD,EAAAA,GAAAA,OAAAA,KAAAA,MACrB6C,EAAI,KAAGC,EAAM,MAGb,OAKF,C","sources":["webpack://seulog/./src/layout/SearchLayout.tsx","webpack://seulog/./src/pages/search.tsx"],"sourcesContent":["import { Global, ThemeProvider } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport { globalStyle } from 'styles';\r\nimport Footer from 'components/Navigation/Footer';\r\nimport Header from 'components/Navigation/Header';\r\nimport { theme, mediaQuery } from 'theme/index';\r\n\r\nconst Body = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  min-height: calc(100vh - 80px); // minus footer height\r\n  height: 100%;\r\n  padding: 0px 40px;\r\n  padding-top: 72px; // padding to header height\r\n  margin: 0 auto;\r\n  background-color: ${({ theme }) => theme.colors.light[50]};\r\n  transition: all 0.5s ease-in-out;\r\n\r\n  ${mediaQuery.sm} {\r\n    padding: 40px 0px;\r\n    padding-top: 72px;\r\n  }\r\n`;\r\n\r\ntype SearchProps = {\r\n  path: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst Search = ({ path, children }: SearchProps) => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Global styles={globalStyle} />\r\n      <Header path={path} />\r\n      <Body>{children}</Body>\r\n      <Footer />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport { PATH } from '../routes/path';\r\nimport SearchLayout from '../layout/SearchLayout';\r\nimport { Body, Guidance2, Subtitle } from '../styles/typography';\r\nimport styled from '@emotion/styled';\r\nimport { mediaQuery, theme } from '../theme';\r\nimport { TagListProps } from '../components/Post/TagMenu';\r\nimport { PostType } from '../@types/Post.types';\r\nimport { Link, graphql } from 'gatsby';\r\n\r\nconst Container = styled.div`\r\n  max-width: 480px;\r\n  text-align: left;\r\n  ${mediaQuery.sm} {\r\n    max-width: 320px;\r\n  }\r\n`;\r\n\r\nconst KeywordWrapper = styled.div`\r\n  padding: 20px 0px;\r\n`;\r\n\r\nconst KeywordBox = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n  padding-top: 12px;\r\n`;\r\n\r\nconst Keyword = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 30px;\r\n  margin: 8px 0px;\r\n  margin-right: 16px;\r\n  padding: 2px 12px;\r\n  border: 1px solid ${({ theme }) => theme.colors.light[300]};\r\n  border-radius: 100px;\r\n\r\n  :hover {\r\n    background-color: ${({ theme }) => theme.colors.primary.default};\r\n    border: 1px solid ${({ theme }) => theme.colors.primary.default};\r\n    & p {\r\n      color: white !important;\r\n    }\r\n  }\r\n`;\r\n\r\ntype SearchPageProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostType[];\r\n    };\r\n  };\r\n};\r\n\r\nconst SearchPage = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n}: SearchPageProps) => {\r\n  const tagList = React.useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: TagListProps['categories'],\r\n          {\r\n            node: {\r\n              frontmatter: { tags },\r\n            },\r\n          }: PostType,\r\n        ) => {\r\n          tags.forEach(tag => {\r\n            if (list[tag] === undefined) list[tag] = 1;\r\n            else list[tag]++;\r\n          });\r\n\r\n          list['All']++;\r\n\r\n          return list;\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  );\r\n  return (\r\n    <SearchLayout path={PATH.search}>\r\n      <Container>\r\n        <Guidance2>Tags</Guidance2>\r\n        <KeywordWrapper>\r\n          {/* <Subtitle medium textColor={theme.colors.primary.default}>\r\n            추천 키워드\r\n          </Subtitle> */}\r\n          <KeywordBox>\r\n            {Object.entries(tagList).map(([key, value]) => (\r\n              <Link to={`/?tag=${key}`} key={key}>\r\n                <Keyword>\r\n                  <Body medium textColor={theme.colors.dark[100]}>\r\n                    {key} ({value})\r\n                  </Body>\r\n                </Keyword>\r\n              </Link>\r\n            ))}\r\n          </KeywordBox>\r\n        </KeywordWrapper>\r\n      </Container>\r\n    </SearchLayout>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n\r\nexport const searchContentQuery = graphql`\r\n  query searchContentQuery {\r\n    allMarkdownRemark(\r\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\r\n      filter: { frontmatter: { tags: { ne: null }, update: { eq: true } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["Body","_styled","target","_ref","theme","colors","light","mediaQuery","_ref2","path","children","___EmotionJSX","ThemeProvider","Global","styles","globalStyle","Header","Footer","Container","KeywordWrapper","name","KeywordBox","Keyword","primary","default","_ref3","_ref4","data","allMarkdownRemark","edges","tagList","React","reduce","list","_ref5","node","frontmatter","tags","forEach","tag","undefined","All","SearchLayout","PATH","Guidance2","Object","entries","map","_ref6","key","value","Link","to","medium","textColor"],"sourceRoot":""}